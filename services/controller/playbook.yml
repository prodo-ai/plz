- hosts: all
  remote_user: root
  become: yes
  tasks:
    - name: Copy the SSH private key
      copy:
        src: "{{ ssh_private_key_file }}"
        dest: /home/ubuntu/.ssh/plz
        owner: ubuntu
        group: ubuntu
        mode: 0600
    - name: Log in to AWS ECR
      shell: |
        eval "$(aws ecr get-login --no-include-email --region {{ aws_region }})"
    - name: Pull ml-pytorch image
      docker_image:
        name: prodoai/plz_ml-pytorch
        pull: yes
    - name: Start the services
      docker_service:
        project_name: controller
        pull: yes
        definition:
          version: "2.3"

          services:
            all:
              image: docker:stable-git
              command:
                - echo
                - "Started."
              depends_on:
                controller:
                  condition: service_healthy

            controller:
              image: "{{ image }}"
              environment:
                CONFIGURATION: |
                  port = 80
                  data_dir = "/data"
                  redis_host = redis
                  instances = {
                    provider = aws-ec2
                    region = "{{ aws_region }}"
                    project = "{{ aws_project }}"
                    key_name = "{{ key_name }}"
                    aws_worker_ami = "{{ aws_worker_ami }}"
                    group_name = "{{ environment_name }}"
                  }
                  images = {
                    provider = aws-ecr
                    region = "{{ aws_region }}"
                    registry = "{{ aws_project }}"
                    repository = "plz/builds"
                  }
                  results {
                    provider = local
                    directory = "/data/results"
                  }
                  log_level = "DEBUG"
                  assumptions = {
                    # We assume that 10 minutes is sufficient for socket
                    # operations on the docker client
                    docker_api_client_timeout_in_minutes = 10
                    # We assume that the auth tokens from ECR last for
                    # at least 5 minutes
                    ecr_login_validity_in_minutes = 5
                    # We assume that if an instance is locked for more
                    # than one hour, something is wrong with it and should be
                    # killed
                    instance_lock_timeout = 3600
                    # We assume that instances take at most 20 minutes to start
                    # an execution. Later than that they'll be considered idle for
                    # too long and disposed of accordingly
                    instance_max_startup_time_in_minutes = 20
                    # Docker sometimes tells us that a container has finished at
                    # some point in the future. We assume that differences
                    # smaller than this value, in seconds, are just due to this
                    # Docker glitch
                    container_idle_timestamp_grace = 60
                  }
              ports:
                - "{{ service_port }}:80"
              volumes:
                - /cache/controller:/data
                - /cache/results:/data/results
                - /home/ubuntu/.ssh/plz:/root/.ssh/id_rsa:ro
                - /var/run/docker.sock:/var/run/docker.sock
              depends_on:
                redis:
                  condition: service_started

            redis:
              image: redis:4
              # We assume that 5 minutes it's a reasonable
              # time as to dump the redis DB
              entrypoint: redis-server --save 300 1
              volumes:
                - /cache/redis_data:/data

          volumes:
            redis_data: {}

    - name: Set cron job for tidying
      cron:
        name: "Harvesting every minute"
        job: "curl -X POST localhost:{{service_port}}/executions/harvest"
